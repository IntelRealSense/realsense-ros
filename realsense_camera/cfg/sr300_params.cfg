#!/usr/bin/env python

PACKAGE="realsense_camera"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#             Name                               Type      Level       Description                     Default    Min     Max
gen.add("enable_depth",                          bool_t,   0,          "Enable Depth",                 True)
gen.add("color_backlight_compensation",          int_t,    0,          "Backlight Compensation",       1,         0,      4)
gen.add("color_brightness",                      int_t,    0,          "Brightness",                   55,        0,      255)
gen.add("color_contrast",                        int_t,    0,          "Contrast",                     32,        16,     64)
gen.add("color_gain",                            int_t,    0,          "Gain",                         64,        64,     2540)
gen.add("color_gamma",                           int_t,    0,          "Gamma",                        220,       100,    280)
gen.add("color_hue",                             int_t,    0,          "Hue",                          0,         -22,    22)
gen.add("color_saturation",                      int_t,    0,          "Saturation",                   128,       0,      255)
gen.add("color_sharpness",                       int_t,    0,          "Sharpness",                    0,         0,      7)

# Must be set only if color_enable_auto_white_balance is disabled
gen.add("color_white_balance",                   int_t,    0,          "White Balance",                3200,      2500,   6500)

gen.add("color_enable_auto_white_balance",       int_t,    0,          "Enable Auto White Balance",    1,         0,      1)

# Options common with f200
gen.add("f200_laser_power",                            int_t,  0,    "Laser Power",                  16,        1,      16)
gen.add("f200_accuracy",                               int_t,  0,    "Accuracy",                     2,         1,      3)
gen.add("f200_motion_range",                           int_t,  0,    "Motion Range",                 1,         1,      100)
gen.add("f200_filter_option",                          int_t,  0,    "Filter Option",                5,         1,      7)
gen.add("f200_confidence_threshold",                   int_t,  0,    "Confidence Threshold",         6,         1,      15)

gen.add("sr300_dynamic_fps", int_t, 0, "Dynamic Fps", 1, 2, 60)
gen.add("sr300_auto_range_enable_motion_versus_range", int_t, 0, "Auto Range Enable Motion Versus Range", 1, 0, 2)
gen.add("sr300_auto_range_enable_laser", int_t, 0, "Auto Range Enable Laser", 1, 0, 1)
gen.add("sr300_auto_range_min_motion_versus_range", int_t, 0, "Auto Range Min Motion Versus Range", 1, -32767, 32767)
gen.add("sr300_auto_range_max_motion_versus_range", int_t, 0, "Auto Range Max Motion Versus Range", 1, -32767, 32767)
gen.add("sr300_auto_range_start_motion_versus_range", int_t, 0, "Auto Range Start Motion Versus Range", 1, -32767, 32767)
gen.add("sr300_auto_range_min_laser", int_t, 0, "Auto Range Min Laser", 1, -32767, 32767)
gen.add("sr300_auto_range_max_laser", int_t, 0, "Auto Range Max Laser", 1, -32767, 32767)
gen.add("sr300_auto_range_start_laser", int_t, 0, "Auto Range Start Laser", 1, -32767, 32767)
gen.add("sr300_auto_range_upper_threshold", int_t, 0, "Auto Range Upper Threshold", 0, 0, 65535)
gen.add("sr300_auto_range_lower_threshold", int_t, 0, "Auto Range Lower Threshold", 0, 0, 65535)
gen.add("sr300_wakeup_dev_phase1_period", int_t, 0, "Wakeup Dev Phase1 Period", 1, 0, 65535)
gen.add("sr300_wakeup_dev_phase1_fps", int_t, 0, "Wakeup Dev Phase1 Fps", 1, 0, 3)
gen.add("sr300_wakeup_dev_phase2_period", int_t, 0, "Wakeup Dev Phase2 Period", 1, 0, 65535)
gen.add("sr300_wakeup_dev_phase2_fps", int_t, 0, "Wakeup Dev Phase2 Fps", 1, 0, 3)
gen.add("sr300_wakeup_dev_reset", int_t, 0, "Wakeup Dev Reset", 1, 0, 0)
gen.add("sr300_wake_on_usb_reason", int_t, 0, "Wake On Usb Reason", 1, 0, 3)
gen.add("sr300_wake_on_usb_confidence", int_t, 0, "Wake On Usb Confidence" , 1, 0, 100)

exit(gen.generate(PACKAGE, "realsense_camera", "sr300_params"))
